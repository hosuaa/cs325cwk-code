 program ::= extern_list decl_list 
           | decl_list
  extern_list ::= extern extern_listprime
  extern_listprime ::= extern extern_listprime
               |  epsilon
  extern ::= "extern" type_spec IDENT "(" params ")" ";"
  decl_list ::= decl decl_listprime
  decl_listprime ::= decl decl_listprime
                | epsilon
  decl ::= var_decl 
        |  fun_decl
  var_decl ::= var_type IDENT ";" 
  type_spec ::= "void"
             |  var_type           
  var_type  ::= "int" |  "float" |  "bool"
  fun_decl ::= type_spec IDENT "(" params ")" block
  params ::= param_list  
          |  "void" | epsilon
  param_list ::= param param_listprime
  param_listprime ::= "," param param_listprime
                    | epsilon
  param ::= var_type IDENT
  block ::= "{" local_decls stmt_list "}"
  local_decls ::= local_declsprime
  local_declsprime ::= local_decl local_declsprime
                    | epsilon
  local_decl ::= var_type IDENT ";"
  stmt_list ::= stmt_listprime
  stmt_listprime ::= stmt stmt_listprime
                    | epsilon
  stmt ::= expr_stmt 
        |  block 
        |  if_stmt 
        |  while_stmt 
        |  return_stmt
  expr_stmt ::= expr ";" 
             |  ";"
  while_stmt ::= "while" "(" expr ")" stmt 
  if_stmt ::= "if" "(" expr ")" block else_stmt
  else_stmt  ::= "else" block
              |  epsilon
  return_stmt ::= "return" ";" 
               |  "return" expr ";"               
  expr ::= IDENT "=" expr
        | rval

  rval ::= rval_or rvalprime
  rvalprime ::= "||" rval_or rvalprime
            | epsilon
 
  rval_or ::= rval_and rval_or_prime
  rval_or_prime ::= "&&" rval_and rval_or_prime | epsilon

  rval_and ::= rval_eq rval_and_prime
  rval_and_prime ::= "==" rval_eq rval_and_prime | "!=" rval_eq rval_and_prime | epsilon

  rval_eq ::= rval_comp rval_eq_prime
  rval_eq_prime ::= "<=" rval_comp rval_eq_prime | "<" rval_comp rval_eq_prime | ">=" rval_comp rval_eq_prime | ">" rval_comp rval_eq_prime | epsilon

  rval_comp ::= rval_add rval_comp_prime
  rval_comp_prime ::= "+" rval_add rval_comp_prime | "-" rval_add rval_comp_prime | epsilon

  rval_add ::= rval_mult rval_add_prime
  rval_add_prime ::= "*" rval_mult rval_add_prime | "/" rval_mult rval_add_prime | "%" rval_mult rval_add_prime | epsilon

  rval_mult ::= "-" rval_unary | "!" rval_unary | rval_unary
  rval_unary ::= "(" expr ")" | rval_ident
  rval_ident ::= IDENT | IDENT "(" args ")" | rval_lit
  rval_lit ::= INT_LIT | FLOAT_LIT | BOOL_LIT
  args ::= arg_list 
        |  epsilon
  arg_list ::= expr arg_listprime
  arg_listprime ::= "," expr arg_listprime
            | epsilon






 program ::= extern_list decl_list 
 program ::= decl_list
  extern_list ::= extern extern_listprime
  extern_listprime ::= extern extern_listprime
  extern_listprime ::=  ''
  extern ::= "extern" type_spec IDENT "(" params ")" ";"
  decl_list ::= decl decl_listprime
  decl_listprime ::= decl decl_listprime
  decl_listprime ::= ''
  decl ::= var_decl 
  decl ::=  fun_decl
  var_decl ::= var_type IDENT ";" 
  type_spec ::= "void"
  type_spec ::=  var_type           
  var_type ::= "int" 
  var_type ::=  "float"
  var_type ::=  "bool"
  fun_decl ::= type_spec IDENT "(" params ")" block
  params ::= param_list  
  params ::=  "void"
  params ::= ''
  param_list ::= param param_listprime
  param_listprime ::= "," param param_listprime
  param_listprime ::= ''
  param ::= var_type IDENT
  block ::= "{" local_decls stmt_list "}"
  local_decls ::= '' local_declsprime
  local_declsprime ::= local_decl local_declsprime
  local_declsprime ::= ''
  local_decl ::= var_type IDENT ";"
  stmt_list ::= '' stmt_listprime
  stmt_listprime ::= stmt stmt_listprime
  stmt_listprime ::= ''
  stmt ::= expr_stmt 
  stmt ::= block 
  stmt ::= if_stmt 
  stmt ::= while_stmt 
  stmt ::= return_stmt
  expr_stmt ::= expr ";" 
  expr_stmt ::=  ";"
  while_stmt ::= "while" "(" expr ")" stmt 
  if_stmt ::= "if" "(" expr ")" block else_stmt
  else_stmt  ::= "else" block
  else_stmt ::= ''
  return_stmt ::= "return" ";" 
  return_stmt ::= "return" expr ";"               
  expr ::= IDENT "=" expr
  expr ::= rval

  rval ::= rval_or rvalprime
  rvalprime ::= "||" rval_or rvalprime
  rvalprime ::= ''
 
  rval_or ::= rval_and rval_or_prime
  rval_or_prime ::= "&&" rval_and rval_or_prime
  rval_or_prime ::= ''

  rval_and ::= rval_eq rval_and_prime
  rval_and_prime ::= "==" rval_eq rval_and_prime
  rval_and_prime ::= "!=" rval_eq rval_and_prime
  rval_and_prime ::= ''

  rval_eq ::= rval_comp rval_eq_prime
  rval_eq_prime ::= "<=" rval_comp rval_eq_prime
  rval_eq_prime ::= "<" rval_comp rval_eq_prime
  rval_eq_prime ::= ">=" rval_comp rval_eq_prime
  rval_eq_prime ::= ">" rval_comp rval_eq_prime
  rval_eq_prime ::= ''

  rval_comp ::= rval_add rval_comp_prime
  rval_comp_prime ::= "+" rval_add rval_comp_prime
  rval_comp_prime ::= "-" rval_add rval_comp_prime
  rval_comp_prime ::= ''

  rval_add ::= rval_mult rval_add_prime
  rval_add_prime ::= "*" rval_mult rval_add_prime
  rval_add_prime ::= "/" rval_mult rval_add_prime
  rval_add_prime ::= "%" rval_mult rval_add_prime
  rval_add_prime ::= ''

  rval_mult ::= "-" rval_unary 
  rval_mult ::= "!" rval_unary
  rval_mult ::= rval_unary
  rval_unary ::= "(" expr ")"
  rval_unary ::= rval_ident
  rval_ident ::= IDENT
  rval_ident ::= IDENT "(" args ")"
  rval_ident ::= rval_lit
  rval_lit ::= INT_LIT
  rval_lit ::= FLOAT_LIT
  rval_lit ::= BOOL_LIT
  args ::= arg_list 
  args ::= ''
  arg_list ::= expr arg_listprime
  arg_listprime ::= "," expr arg_listprime
  arg_listprime ::= ''


int
float
bool
variable
expression
if
else
while
assignment
binary operation
function
extern
comparison
addition
multiplication
variable
function
return?
